
function q = rotmat_to_quat( R )

%FROM THE BLING BOOK (SCIAVICCO)
q(1,1) = 1/2 * sqrt(1+ sum(diag(R)));
q(2,1) = 1/2 * sign(R(3,2)- R(2,3)) * sqrt(R(1,1)- R(2,2)- R(3,3) + 1);
q(3,1) = 1/2 * sign(R(1,3)- R(3,1)) * sqrt(R(2,2)- R(3,3)- R(1,1) + 1);
q(4,1) = 1/2 * sign(R(2,1)- R(1,2)) * sqrt(R(3,3)- R(1,1)- R(2,2) + 1);

%FROM BEFORE!!
% % rotations can get funky around pi, pi/2 etc...
%   
%   tr = 1 + sum(diag(R));
%   if( tr > 1e-12 )
%     w = sqrt(tr)/2;
%     q(1,1) = w;
%     q(2,1) = ( R(3,2) - R(2,3) ) / (4*w);
%     q(3,1) = ( R(1,3) - R(3,1) ) / (4*w);
%     q(4,1) = ( R(2,1) - R(1,2) ) / (4*w);
%   elseif ( R(1,1) > R(2,2) && R(1,1) > R(3,3) )
%     w = sqrt( 1 + R(1,1) - R(2,2) - R(3,3))/2;
%     q(1,1) = (R(2,3) - R(3,2) ) / (4*w);
%     q(2,1) = w;
%     q(3,1) = (R(1,2) + R(2,1) ) / (4*w);
%     q(4,1) = (R(1,3) + R(3,1) ) / (4*w);
%   elseif (R(2,2) > R(3,3))
%     w = sqrt( 1 + R(2,2) - R(1,1) - R(3,3))/2;
%     q(1,1) = (R(1,3) - R(3,1) ) / (4*w); 
%     q(2,1) = (R(1,2) + R(2,1) ) / (4*w);
%     q(3,1) = w;
%     q(4,1) = (R(2,3) + R(3,2) ) / (4*w);
%   else
%     w = sqrt( 1 + R(3,3) - R(1,1) - R(2,2))/2;
%     q(1,1) = (R(1,2) - R(2,1) ) / (4*w);
%     q(2,1) = (R(1,3) + R(3,1) ) / (4*w);
%     q(3,1) = (R(2,3) + R(3,2) ) / (4*w);
%     q(4,1) = w;
%   end
% 
%   q = normalize(q);

